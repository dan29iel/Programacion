Per fer aquesta activitat he continuat seguint el model de les altres, en aquest cas tenom un programa on primerament carregara o creara de nou un arxiu TXT. És important posar sempre el .txt tant quant es crea de nou
com quan vols obrir un arxiu ja creat amb anterioritat, és a dir, quan pregunta "Introdueix el nom del fitxer de tasques:" sempre s'haura de posar Exemple.txt. Consta d'un menu amb 5 opcions (afegir, modificar, eliminar,
mostar y sortir y guardar.)

Problemes al realitzar la tasca: Només he tingut el problema que no m'agafa quan li vull posar el .txt en el programa, new FileReader(nomFitxer + ".txt") no m'agafa bé aixó i aixó provoca que sempre s'ha de posar el nom del 
arxiu més el .txt.

import java.io.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Tasca {
    private String titol;                           //Definim les 4 variables d'instancia de la tasca.
    private String descripcio;
    private LocalDate dataVenciment;
    private String estat;

    public Tasca(String titol, String descripcio, LocalDate dataVenciment, String estat) {            //Constructor de la classe i inicialitzem les varibles d'instancia.
        this.titol = titol;
        this.descripcio = descripcio;
        this.dataVenciment = dataVenciment;
        this.estat = estat;
    }

    public String getTitol() {                          //Metodes d'accés (getters i setters) per les varibles del personatges.
        return titol;
    }

    public void setTitol(String titol) {
        this.titol = titol;
    }

    public String getDescripcio() {
        return descripcio;
    }

    public void setDescripcio(String descripcio) {
        this.descripcio = descripcio;
    }

    public LocalDate getDataVenciment() {
        return dataVenciment;
    }

    public void setDataVenciment(LocalDate dataVenciment) {
        this.dataVenciment = dataVenciment;
    }

    public String getEstat() {
        return estat;
    }

    public void setEstat(String estat) {
        this.estat = estat;
    }

    @Override
    public String toString() {                         //Convertim en una cadena de text i les caracteristiques les posem separades per comes.
        return titol + "," + descripcio + "," + dataVenciment + "," + estat;
    }
}

class GestorTasques {
    private List<Tasca> tasques;   //Declarem la llista de les caracteristiques de la tasca.
    private Scanner scanner;

    public GestorTasques() {        //Declarem el constructor de la classe GestorTasques per inicialitzar la llista.
        this.tasques = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    public void carregarArxiuTasques(String nomFitxer) {             //Declarem el metode carregarArxiuTasques i el nom del arxiu per carregar les taques.
        try (BufferedReader br = new BufferedReader(new FileReader(nomFitxer))) {       //Iniciem el BufferedReader per llegir els caracters del arxiu i decalrem la variable registre per emmagatzemar les linees de text.
            String registre;                               
            while ((registre = br.readLine()) != null) {
                String[] posicio = registre.split(",");             //Asignem cada registre a cada variable utilitzant la coma com a delimitador i les afegim a les variables
                String titol = posicio[0];
                String descripcio = posicio[1];
                LocalDate dataVenciment = LocalDate.parse(posicio[2]);
                String estat = posicio[3];
                tasques.add(new Tasca(titol, descripcio, dataVenciment, estat));            //Afegim els nous registres a la classe Tasca
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 
    public void guardarArxiuTasques(String nomFitxer) {     //Declarem el metode guardarArxiuTasques i el nom del arxiu per guardar les taques.
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(nomFitxer))) {       /Iniciem el BufferedWriter per escriure els caracters al arxiu.
            for (Tasca tasca : tasques) {          //Escrivim a partir del toString les lines de text separats per comes i el bw.newLine fa que es salti de linea per cada tasca.
                bw.write(tasca.toString());
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void afegirTascaArxiu() {               //Declarem el metode afegirTascaArxiu.
        System.out.print("Insereix el Titol: ");
        String titol = scanner.nextLine();
        System.out.print("Insereix la Descripcio: ");
        String descripcio = scanner.nextLine();
        System.out.print("Insereix Data de venciment (Exemple: 2024-05-17): ");
        LocalDate dataVenciment = LocalDate.parse(scanner.nextLine());
        System.out.print("Insereix l'Estat (pendent, en curs, completada): ");
        String estat = scanner.nextLine();
        tasques.add(new Tasca(titol, descripcio, dataVenciment, estat));       //Creem la nova tasca amb les caracteristiques escollides.
        System.out.println("Tasca afegida");
    }

    public void modificarTascaArxiu() {          //Declarem el metode modificarTascaArxiu.
        System.out.print("Insereix el titol de la tasca a modificar: ");
        String titol = scanner.nextLine();
        for (Tasca tasca : tasques) {
            if (tasca.getTitol().equalsIgnoreCase(titol)) {  //Preguntem al usuari el nom de la tasca per poder filtrar-la i llavors modificarla, si la troba pasara a la següent opció i sino sortira un avís de tasca no trobada.
                System.out.println("Tasca Trobada");
                System.out.print("Vols cambiar la descripcio? (Introdueix SI o NO): ");    //Preguntarem al usuari si vols cambiar la descripcio, si introdueix per terminal SI tindrá la opció de intoduir la nova descipcio, si introdueix NO preguntara la següent pregunta.
                String novaDescripcioSi = scanner.nextLine();
                if (novaDescripcioSi.equalsIgnoreCase("SI")) {
                    System.out.print("Introdueix la nova descripcio: ");
                    String novaDescripcio = scanner.nextLine();
                    tasca.setDescripcio(novaDescripcio);
                }
                System.out.print("Vols cambiarla data de venciment? (Introdueix SI o NO): ");   //Preguntarem al usuari si vols cambiar la data de venciment, si introdueix per terminal SI tindrá la opció de intoduir la nova data de venciment, si introdueix NO preguntara la següent pregunta.
                String novaDataVencimentSi = scanner.nextLine();
                if (novaDataVencimentSi.equalsIgnoreCase("SI")) {
                    System.out.print("Introdueix la nova data (Exemple: 2024-05-17): ");
                    LocalDate novaDataVenciment = LocalDate.parse(scanner.nextLine());
                    tasca.setDataVenciment(novaDataVenciment);
                }
                System.out.print("Vols cambiar l'estat? (Introdueix SI o NO): ");   //Preguntarem al usuari si vols cambiar l'estat, si introdueix per terminal SI tindrá la opció de intoduir el nou estat, si introdueix NO preguntara la següent pregunta.
                String nouEstatSi = scanner.nextLine();
                if (nouEstatSi.equalsIgnoreCase("SI")) {
                    System.out.print("Introdueix el nou estat (pendent, en curs, completada): ");
                    String nouEstat = scanner.nextLine();
                    tasca.setEstat(nouEstat);
                }
                System.out.println("Tasca modificada");    //Avís per quan la tasca es modifiqui correctament.
                return;
            }
        }
        System.out.println("Aquesta tasca no esta en el gestor");         //Avís per quan introduïm el nom d'una tasca que no existeix.
    }
